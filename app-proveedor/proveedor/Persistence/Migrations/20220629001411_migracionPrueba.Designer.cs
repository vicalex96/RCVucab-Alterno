// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using proveedor.Persistence.Database;
using proveedor.Persistence;

#nullable disable

namespace proveedor.Migrations
{
    [DbContext(typeof(ProveedorDbContext))]
    [Migration("20220629001411_migracionPrueba")]
    partial class migracionPrueba
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("proveedor.Persistence.Entities.CotizacionParteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CotizacionParteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("PrecioParteUnidad")
                        .HasColumnType("real");

                    b.Property<Guid>("ProveedorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequerimientoId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("Requerimientos")
                        .HasColumnType("uuid[]");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CotizacionPartes");
                });

            modelBuilder.Entity("proveedor.Persistence.Entities.Parte", b =>
                {
                    b.Property<Guid>("parteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("parteId");

                    b.ToTable("partes");

                    b.HasData(
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-1000-97530821c04b"),
                            nombre = "puerta izquierda delantera"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-2000-97530821c04b"),
                            nombre = "puerta derecha delantera"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-3000-97530821c04b"),
                            nombre = "rueda"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-4000-97530821c04b"),
                            nombre = "capó de motor"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-5000-97530821c04b"),
                            nombre = "capó de maleta"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-7000-97530821c04b"),
                            nombre = "rin"
                        });
                });

            modelBuilder.Entity("proveedor.Persistence.Entities.Requerimiento", b =>
                {
                    b.Property<Guid>("requerimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CotizacionParteEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SolicitudReparacionsolicitudRepId")
                        .HasColumnType("uuid");

                    b.Property<int>("cantidad")
                        .HasColumnType("integer");

                    b.Property<Guid>("cotizaciones")
                        .HasColumnType("uuid");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("estado")
                        .HasColumnType("integer");

                    b.Property<Guid>("parteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("solicitudRepId")
                        .HasColumnType("uuid");

                    b.Property<int>("tipoRequerimiento")
                        .HasColumnType("integer");

                    b.HasKey("requerimientoId");

                    b.HasIndex("CotizacionParteEntityId");

                    b.HasIndex("SolicitudReparacionsolicitudRepId");

                    b.HasIndex("parteId");

                    b.ToTable("Requerimientos");

                    b.HasData(
                        new
                        {
                            requerimientoId = new Guid("0c5c3262-d5ef-1000-bc0e-97530821c04b"),
                            cantidad = 1,
                            cotizaciones = new Guid("00000000-0000-0000-0000-000000000000"),
                            descripcion = "puerta detrozada parcialmente",
                            estado = 0,
                            parteId = new Guid("0c5c3262-d5ef-46c7-2000-97530821c04b"),
                            solicitudRepId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b"),
                            tipoRequerimiento = 0
                        },
                        new
                        {
                            requerimientoId = new Guid("0c5c3262-d5ef-2000-bc0e-97530821c04b"),
                            cantidad = 1,
                            cotizaciones = new Guid("00000000-0000-0000-0000-000000000000"),
                            descripcion = "cambio capó de la maleta",
                            estado = 0,
                            parteId = new Guid("0c5c3262-d5ef-46c7-5000-97530821c04b"),
                            solicitudRepId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b"),
                            tipoRequerimiento = 1
                        });
                });

            modelBuilder.Entity("proveedor.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.Property<Guid>("solicitudRepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("fechaSolicitud")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("incidenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tallerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("vehiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("solicitudRepId");

                    b.ToTable("SolicitudReparacions");

                    b.HasData(
                        new
                        {
                            solicitudRepId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b"),
                            fechaSolicitud = new DateTime(2022, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            incidenteId = new Guid("10000000-d5ef-46c7-bc0e-97530823c05b"),
                            tallerId = new Guid("10003262-d5ef-46c7-bc0e-97530823c05b"),
                            vehiculoId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b")
                        });
                });

            modelBuilder.Entity("proveedor.Persistence.Entities.Requerimiento", b =>
                {
                    b.HasOne("proveedor.Persistence.Entities.CotizacionParteEntity", null)
                        .WithMany("requerimientos")
                        .HasForeignKey("CotizacionParteEntityId");

                    b.HasOne("proveedor.Persistence.Entities.SolicitudReparacion", null)
                        .WithMany("requerimientos")
                        .HasForeignKey("SolicitudReparacionsolicitudRepId");

                    b.HasOne("proveedor.Persistence.Entities.Parte", "parte")
                        .WithMany("requerimientos")
                        .HasForeignKey("parteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parte");
                });

            modelBuilder.Entity("proveedor.Persistence.Entities.CotizacionParteEntity", b =>
                {
                    b.Navigation("requerimientos");
                });

            modelBuilder.Entity("proveedor.Persistence.Entities.Parte", b =>
                {
                    b.Navigation("requerimientos");
                });

            modelBuilder.Entity("proveedor.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.Navigation("requerimientos");
                });
#pragma warning restore 612, 618
        }
    }
}
