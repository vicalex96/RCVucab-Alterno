// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using taller.Persistence.Database;

#nullable disable

namespace taller.Migrations
{
    [DbContext(typeof(TallerDBContext))]
    [Migration("20220629091559_migracion1_taller")]
    partial class migracion1_taller
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("taller.Persistence.Entities.CotizacionReparacion", b =>
                {
                    b.Property<Guid>("cotizacionRepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("costoManoObra")
                        .HasColumnType("real");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("fechaFinReparacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("fechaInicioReparacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("requerimientoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("solicitudRepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tallerId")
                        .HasColumnType("uuid");

                    b.HasKey("cotizacionRepId");

                    b.HasIndex("requerimientoId");

                    b.HasIndex("solicitudRepId")
                        .IsUnique();

                    b.ToTable("CotizacionReparaciones");
                });

            modelBuilder.Entity("taller.Persistence.Entities.MarcaTaller", b =>
                {
                    b.Property<Guid>("marcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("manejaTodas")
                        .HasColumnType("boolean");

                    b.Property<int?>("marca")
                        .HasColumnType("integer");

                    b.Property<Guid>("tallerId")
                        .HasColumnType("uuid");

                    b.HasKey("marcaId");

                    b.HasIndex("tallerId");

                    b.ToTable("Marcas");

                    b.HasData(
                        new
                        {
                            marcaId = new Guid("0c5c3262-15ef-46c7-bc0e-97530821c04b"),
                            manejaTodas = false,
                            marca = 0,
                            tallerId = new Guid("10003262-d5ef-46c7-bc0e-97530823c05b")
                        },
                        new
                        {
                            marcaId = new Guid("0c5c3262-25ef-46c7-bc0e-97530821c04b"),
                            manejaTodas = false,
                            marca = 1,
                            tallerId = new Guid("10003262-d5ef-46c7-bc0e-97530823c05b")
                        },
                        new
                        {
                            marcaId = new Guid("0c5c3262-35ef-46c7-bc0e-97530821c04b"),
                            manejaTodas = false,
                            marca = 7,
                            tallerId = new Guid("20003262-d5ef-46c7-bc0e-97530823c05b")
                        },
                        new
                        {
                            marcaId = new Guid("0c5c3262-45ef-46c7-bc0e-97530821c04b"),
                            manejaTodas = false,
                            marca = 2,
                            tallerId = new Guid("20003262-d5ef-46c7-bc0e-97530823c05b")
                        },
                        new
                        {
                            marcaId = new Guid("0c5c3262-55ef-46c7-bc0e-97530821c04b"),
                            manejaTodas = false,
                            marca = 5,
                            tallerId = new Guid("30003262-d5ef-46c7-bc0e-97530823c05b")
                        },
                        new
                        {
                            marcaId = new Guid("0c5c3262-65ef-46c7-bc0e-97530821c04b"),
                            manejaTodas = false,
                            marca = 6,
                            tallerId = new Guid("30003262-d5ef-46c7-bc0e-97530823c05b")
                        });
                });

            modelBuilder.Entity("taller.Persistence.Entities.Parte", b =>
                {
                    b.Property<Guid>("parteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("parteId");

                    b.ToTable("partes");

                    b.HasData(
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-1000-97530821c04b"),
                            nombre = "puerta izquierda delantera"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-2000-97530821c04b"),
                            nombre = "puerta derecha delantera"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-3000-97530821c04b"),
                            nombre = "rueda"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-4000-97530821c04b"),
                            nombre = "capó de motor"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-5000-97530821c04b"),
                            nombre = "capó de maleta"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-7000-97530821c04b"),
                            nombre = "rin"
                        });
                });

            modelBuilder.Entity("taller.Persistence.Entities.Requerimiento", b =>
                {
                    b.Property<Guid>("requerimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SolicitudReparacionsolicitudRepId")
                        .HasColumnType("uuid");

                    b.Property<int>("cantidad")
                        .HasColumnType("integer");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("estado")
                        .HasColumnType("integer");

                    b.Property<Guid>("parteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("solicitudRepId")
                        .HasColumnType("uuid");

                    b.Property<int>("tipoRequerimiento")
                        .HasColumnType("integer");

                    b.HasKey("requerimientoId");

                    b.HasIndex("SolicitudReparacionsolicitudRepId");

                    b.HasIndex("parteId");

                    b.ToTable("Requerimientos");

                    b.HasData(
                        new
                        {
                            requerimientoId = new Guid("0c5c3262-d5ef-1000-bc0e-97530821c04b"),
                            cantidad = 1,
                            descripcion = "puerta detrozada parcialmente",
                            estado = 0,
                            parteId = new Guid("0c5c3262-d5ef-46c7-2000-97530821c04b"),
                            solicitudRepId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b"),
                            tipoRequerimiento = 0
                        },
                        new
                        {
                            requerimientoId = new Guid("0c5c3262-d5ef-2000-bc0e-97530821c04b"),
                            cantidad = 1,
                            descripcion = "cambio capó de la maleta",
                            estado = 0,
                            parteId = new Guid("0c5c3262-d5ef-46c7-5000-97530821c04b"),
                            solicitudRepId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b"),
                            tipoRequerimiento = 1
                        });
                });

            modelBuilder.Entity("taller.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.Property<Guid>("solicitudRepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("fechaSolicitud")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("incidenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tallerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("vehiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("solicitudRepId");

                    b.HasIndex("tallerId");

                    b.ToTable("SolicitudReparacions");

                    b.HasData(
                        new
                        {
                            solicitudRepId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b"),
                            fechaSolicitud = new DateTime(2022, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            incidenteId = new Guid("10000000-d5ef-46c7-bc0e-97530823c05b"),
                            tallerId = new Guid("10003262-d5ef-46c7-bc0e-97530823c05b"),
                            vehiculoId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b")
                        });
                });

            modelBuilder.Entity("taller.Persistence.Entities.Taller", b =>
                {
                    b.Property<Guid>("tallerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("nombreLocal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("tallerId");

                    b.ToTable("Talleres");

                    b.HasData(
                        new
                        {
                            tallerId = new Guid("10003262-d5ef-46c7-bc0e-97530823c05b"),
                            nombreLocal = "Taller de Pepito"
                        },
                        new
                        {
                            tallerId = new Guid("20003262-d5ef-46c7-bc0e-97530823c05b"),
                            nombreLocal = "MadMonkey"
                        },
                        new
                        {
                            tallerId = new Guid("30003262-d5ef-46c7-bc0e-97530823c05b"),
                            nombreLocal = "Locos Por los Autos"
                        },
                        new
                        {
                            tallerId = new Guid("40003262-d5ef-46c7-bc0e-97530823c05b"),
                            nombreLocal = "Roller Customs"
                        });
                });

            modelBuilder.Entity("taller.Persistence.Entities.Vehiculo", b =>
                {
                    b.Property<Guid>("vehiculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("anioModelo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("aseguradoId")
                        .HasColumnType("uuid");

                    b.Property<int>("color")
                        .HasColumnType("integer");

                    b.Property<DateTime>("fechaCompra")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("marca")
                        .HasColumnType("integer");

                    b.Property<string>("placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.HasKey("vehiculoId");

                    b.ToTable("Vehiculos");

                    b.HasData(
                        new
                        {
                            vehiculoId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c04b"),
                            anioModelo = 2004,
                            aseguradoId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c03b"),
                            color = 1,
                            fechaCompra = new DateTime(2018, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            marca = 0,
                            placa = "AB320AM"
                        },
                        new
                        {
                            vehiculoId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c05b"),
                            anioModelo = 2006,
                            aseguradoId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c03f"),
                            color = 6,
                            fechaCompra = new DateTime(2010, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            marca = 7,
                            placa = "AB322AM"
                        });
                });

            modelBuilder.Entity("taller.Persistence.Entities.CotizacionReparacion", b =>
                {
                    b.HasOne("taller.Persistence.Entities.Requerimiento", null)
                        .WithMany("cotizacionesParte")
                        .HasForeignKey("requerimientoId");

                    b.HasOne("taller.Persistence.Entities.SolicitudReparacion", "solicitud")
                        .WithOne("cotizacion")
                        .HasForeignKey("taller.Persistence.Entities.CotizacionReparacion", "solicitudRepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("solicitud");
                });

            modelBuilder.Entity("taller.Persistence.Entities.MarcaTaller", b =>
                {
                    b.HasOne("taller.Persistence.Entities.Taller", "taller")
                        .WithMany("marcas")
                        .HasForeignKey("tallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taller");
                });

            modelBuilder.Entity("taller.Persistence.Entities.Requerimiento", b =>
                {
                    b.HasOne("taller.Persistence.Entities.SolicitudReparacion", null)
                        .WithMany("requerimientos")
                        .HasForeignKey("SolicitudReparacionsolicitudRepId");

                    b.HasOne("taller.Persistence.Entities.Parte", "parte")
                        .WithMany()
                        .HasForeignKey("parteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parte");
                });

            modelBuilder.Entity("taller.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.HasOne("taller.Persistence.Entities.Taller", null)
                        .WithMany("solicitudes")
                        .HasForeignKey("tallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("taller.Persistence.Entities.Requerimiento", b =>
                {
                    b.Navigation("cotizacionesParte");
                });

            modelBuilder.Entity("taller.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.Navigation("cotizacion");

                    b.Navigation("requerimientos");
                });

            modelBuilder.Entity("taller.Persistence.Entities.Taller", b =>
                {
                    b.Navigation("marcas");

                    b.Navigation("solicitudes");
                });
#pragma warning restore 612, 618
        }
    }
}
