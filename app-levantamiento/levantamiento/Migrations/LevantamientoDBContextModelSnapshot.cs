// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using levantamiento.Persistence.Database;

#nullable disable

namespace levantamiento.Migrations
{
    [DbContext(typeof(LevantamientoDBContext))]
    partial class LevantamientoDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("levantamiento.Persistence.Entities.Incidente", b =>
                {
                    b.Property<Guid>("incidenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("polizaId")
                        .HasColumnType("uuid");

                    b.HasKey("incidenteId");

                    b.ToTable("Incidentes");

                    b.HasData(
                        new
                        {
                            incidenteId = new Guid("0c5c3262-d5ef-46c7-0004-000000000001"),
                            polizaId = new Guid("0c5c3262-d5ef-46c7-0003-000000000001")
                        },
                        new
                        {
                            incidenteId = new Guid("0c5c3262-d5ef-46c7-0004-000000000002"),
                            polizaId = new Guid("0c5c3262-d5ef-46c7-0003-000000000002")
                        },
                        new
                        {
                            incidenteId = new Guid("0c5c3262-d5ef-46c7-0004-000000000003"),
                            polizaId = new Guid("0c5c3262-d5ef-46c7-0003-000000000003")
                        });
                });

            modelBuilder.Entity("levantamiento.Persistence.Entities.Parte", b =>
                {
                    b.Property<Guid>("parteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("parteId");

                    b.ToTable("Partes");

                    b.HasData(
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-1000-97530821c04b"),
                            nombre = "puerta izquierda delantera"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-2000-97530821c04b"),
                            nombre = "puerta derecha delantera"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-3000-97530821c04b"),
                            nombre = "rueda"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-4000-97530821c04b"),
                            nombre = "capó de motor"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-5000-97530821c04b"),
                            nombre = "capó de maleta"
                        },
                        new
                        {
                            parteId = new Guid("0c5c3262-d5ef-46c7-7000-97530821c04b"),
                            nombre = "rin"
                        });
                });

            modelBuilder.Entity("levantamiento.Persistence.Entities.Requerimiento", b =>
                {
                    b.Property<Guid>("requerimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("cantidad")
                        .HasColumnType("integer");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("parteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("solicitudReparacionId")
                        .HasColumnType("uuid");

                    b.Property<int>("tipoRequerimiento")
                        .HasColumnType("integer");

                    b.HasKey("requerimientoId");

                    b.HasIndex("parteId");

                    b.HasIndex("solicitudReparacionId");

                    b.ToTable("Requerimientos");

                    b.HasData(
                        new
                        {
                            requerimientoId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c0c1"),
                            cantidad = 1,
                            descripcion = "puerta detrozada parcialmente",
                            parteId = new Guid("0c5c3262-d5ef-46c7-2000-97530821c04b"),
                            solicitudReparacionId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c0cc"),
                            tipoRequerimiento = 0
                        },
                        new
                        {
                            requerimientoId = new Guid("0c5c3262-d5ef-2000-bc0e-97530821c04b"),
                            cantidad = 1,
                            descripcion = "cambio capó de la maleta",
                            parteId = new Guid("0c5c3262-d5ef-46c7-5000-97530821c04b"),
                            solicitudReparacionId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c0cc"),
                            tipoRequerimiento = 1
                        });
                });

            modelBuilder.Entity("levantamiento.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.Property<Guid>("SolicitudReparacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("fechaSolicitud")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("incidenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tallerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("vehiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("SolicitudReparacionId");

                    b.HasIndex("incidenteId");

                    b.ToTable("SolicitudesReparacion");

                    b.HasData(
                        new
                        {
                            SolicitudReparacionId = new Guid("0c5c3262-d5ef-46c7-bc0e-97530821c0cc"),
                            fechaSolicitud = new DateTime(2010, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            incidenteId = new Guid("0c5c3262-d5ef-46c7-0004-000000000001"),
                            tallerId = new Guid("0c5c3262-d5ef-46c7-0005-000000000002"),
                            vehiculoId = new Guid("0c5c3262-d5ef-46c7-0002-000000000001")
                        });
                });

            modelBuilder.Entity("levantamiento.Persistence.Entities.Requerimiento", b =>
                {
                    b.HasOne("levantamiento.Persistence.Entities.Parte", "parte")
                        .WithMany()
                        .HasForeignKey("parteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("levantamiento.Persistence.Entities.SolicitudReparacion", "solicitudReparacion")
                        .WithMany("requerimientos")
                        .HasForeignKey("solicitudReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parte");

                    b.Navigation("solicitudReparacion");
                });

            modelBuilder.Entity("levantamiento.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.HasOne("levantamiento.Persistence.Entities.Incidente", "incidente")
                        .WithMany("solicitudes")
                        .HasForeignKey("incidenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("incidente");
                });

            modelBuilder.Entity("levantamiento.Persistence.Entities.Incidente", b =>
                {
                    b.Navigation("solicitudes");
                });

            modelBuilder.Entity("levantamiento.Persistence.Entities.SolicitudReparacion", b =>
                {
                    b.Navigation("requerimientos");
                });
#pragma warning restore 612, 618
        }
    }
}
